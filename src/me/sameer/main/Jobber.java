package me.sameer.main;

import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.openxml4j.opc.PackageAccess;
import org.apache.poi.poifs.crypt.Decryptor;
import org.apache.poi.poifs.crypt.EncryptionInfo;
import org.apache.poi.poifs.crypt.EncryptionMode;
import org.apache.poi.poifs.crypt.Encryptor;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import uk.co.mmscomputing.device.scanner.Scanner;
import uk.co.mmscomputing.device.scanner.ScannerDevice;
import uk.co.mmscomputing.device.scanner.ScannerListener;
import uk.co.mmscomputing.device.scanner.ScannerIOMetadata;
import uk.co.mmscomputing.device.twain.TwainIOMetadata;
import uk.co.mmscomputing.device.twain.TwainSource;

/**
 *
 * @author robotia
 */
public class Jobber extends javax.swing.JFrame implements ScannerListener
{

    private Scanner scanner;
    private BufferedImage current_sheet = null;
    public ScanModes mode = ScanModes.FRONT_ONLY;
    public List<Results> results = new ArrayList<Results>();
    public AnswerKey answerkey = null;

    /**
     * Creates new form Jobber
     */
    public Jobber()
    {
        try
        {
            scanner = Scanner.getDevice();
            scanner.addListener(this);
            initComponents();
            refreshDevices();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    public void refreshDevices() throws Exception
    {
        this.scannerbox.removeAllItems();
        String[] devices = this.scanner.getDeviceNames();
        for (String dev : devices)
        {
            this.scannerbox.addItem(dev);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        LastSpinner = new javax.swing.JSpinner();
        FirstSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        StartScanButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        scannerbox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        RefreshDevicesButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        IDScanCombo = new javax.swing.JComboBox();
        SaveResultsButton = new javax.swing.JButton();
        SelectOutputFileButton = new javax.swing.JButton();
        FileNameLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ClearTestsButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        BrowseForAnswerKeyButton = new javax.swing.JButton();
        DPIComboBox = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("First Question: ");

        jLabel2.setText("Last Question:");

        LastSpinner.setValue(50);

        FirstSpinner.setValue(1);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Scantron Optical Recognition Software");

        StartScanButton.setText("Scan");
        StartScanButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                StartScanButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Output File:");

        scannerbox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setText("Scanner Name");

        RefreshDevicesButton.setText("Refresh");
        RefreshDevicesButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                RefreshDevicesButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Scan IDs?");

        IDScanCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Yes", "No" }));

        SaveResultsButton.setText("Save All");
        SaveResultsButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                SaveResultsButtonActionPerformed(evt);
            }
        });

        SelectOutputFileButton.setText("Browse");
        SelectOutputFileButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                SelectOutputFileButtonActionPerformed(evt);
            }
        });

        FileNameLabel.setText("Will save to: ...");

        jLabel7.setText("Answer Key");

        ClearTestsButton.setText("Clear");
        ClearTestsButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ClearTestsButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Excel Password");

        BrowseForAnswerKeyButton.setText("Browse");
        BrowseForAnswerKeyButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                BrowseForAnswerKeyButtonActionPerformed(evt);
            }
        });

        DPIComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "75", "100" }));

        jLabel9.setText("DPI");

        jMenu1.setText("About");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Help");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(IDScanCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(SelectOutputFileButton))
                                    .addComponent(FileNameLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(FirstSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                    .addComponent(LastSpinner))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel8))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(BrowseForAnswerKeyButton)))
                                .addComponent(RefreshDevicesButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel9))
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DPIComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(scannerbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(StartScanButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ClearTestsButton)
                        .addGap(18, 18, 18)
                        .addComponent(SaveResultsButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(FirstSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(LastSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(scannerbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DPIComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(SelectOutputFileButton))
                        .addGap(2, 2, 2)
                        .addComponent(FileNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(IDScanCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                        .addComponent(StartScanButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(RefreshDevicesButton)
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(BrowseForAnswerKeyButton))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SaveResultsButton)
                            .addComponent(ClearTestsButton))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public int getFirstQuestion()
    {
        return (Integer) this.FirstSpinner.getValue();
    }

    public int getLastQuestion()
    {
        return (Integer) this.LastSpinner.getValue();
    }
    private void StartScanButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_StartScanButtonActionPerformed
    {//GEN-HEADEREND:event_StartScanButtonActionPerformed
        try
        {
            //Handle error cases
            if (getFirstQuestion() > getLastQuestion())
            {
                JOptionPane.showMessageDialog(this, "Your first question must be less than or equal to your last question!");
                return;
            }
            if (getFirstQuestion() < 1 || getLastQuestion() < 1)
            {
                JOptionPane.showMessageDialog(this, "Your questions must be positive and greater than 0!");
                return;
            }
            if (getFirstQuestion() > 100 || getLastQuestion() > 100)
            {
                JOptionPane.showMessageDialog(this, "Your questions must be less than 100!");
                return;
            }

            //Notify which scanner is being used
            System.out.println("Scanning from " + (String) this.scannerbox.getSelectedItem());

            //Set the scan MODE
            if (getFirstQuestion() > 51)
            {
                this.mode = ScanModes.BACK_ONLY;
            }
            else if (getFirstQuestion() < 51 && getLastQuestion() >= 51)
            {
                this.mode = ScanModes.FRONT_AND_BACK;
            }
            else
            {
                this.mode = ScanModes.FRONT_ONLY;
            }

            //Choose the right scanner and notify that it's time to get the image
            scanner.select((String) this.scannerbox.getSelectedItem());
            scanner.acquire();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_StartScanButtonActionPerformed

    private void RefreshDevicesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshDevicesButtonActionPerformed
        try
        {
            //Refresh the devices list
            this.refreshDevices();
        }
        catch (Exception e)
        {

        }
    }//GEN-LAST:event_RefreshDevicesButtonActionPerformed

    private File outputExcelFile = null;
    private void SelectOutputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectOutputFileButtonActionPerformed
        //Select the output file
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showSaveDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION)
        {
            File selectedFile = fileChooser.getSelectedFile();
            //Handle for forgot xlsx
            if (!selectedFile.getName().endsWith(".xlsx"))
            {
                selectedFile = new File(selectedFile.getAbsolutePath() + ".xlsx");
            }
            //Set it
            System.out.println("You chose: " + selectedFile.getAbsolutePath());
            this.outputExcelFile = selectedFile;
            this.FileNameLabel.setText("Will save to: " + this.outputExcelFile.getName());
        }
    }//GEN-LAST:event_SelectOutputFileButtonActionPerformed

    private void SaveResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveResultsButtonActionPerformed

        //Handle problems
        if (outputExcelFile == null)
        {
            JOptionPane.showMessageDialog(this, "You must first select a save file!");
            return;
        }

        XSSFWorkbook workbook = new XSSFWorkbook();

        //Set the green/red color styles
        XSSFCellStyle green = workbook.createCellStyle();
        XSSFCellStyle red = workbook.createCellStyle();
        green.setFillForegroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        green.setFillPattern(IndexedColors.RED.getIndex());
        red.setFillForegroundColor(new XSSFColor(Color.red));
        red.setFillPattern(CellStyle.SOLID_FOREGROUND);

        //Manage the individual score sheet
        XSSFSheet current_sheet = workbook.createSheet("Individual Scores");
        Row init_row = current_sheet.createRow(0);
        //Set the top column values
        init_row.createCell(0).setCellValue("ID");
        init_row.createCell(1).setCellValue("Right");
        init_row.createCell(2).setCellValue("Wrong");
        //Add right/wrong for each result
        for (int i = 1; i <= results.size(); i++)
        {
            Row current_row = current_sheet.createRow(i);
            Results current_result_sheet = results.get(i - 1);
            current_row.createCell(0).setCellValue(current_result_sheet.ID);
            int right = 0;
            int wrong = 0;
            //Count number of right and wrong
            for (int y = 0; y < current_result_sheet.answers.size(); y++)
            {
                if (current_result_sheet.answers.get(y).equals(this.answerkey.answers.get(y)))
                {
                    right++;
                }
                else
                {
                    wrong++;
                }
            }
            //Set the cell values for right and wrong
            current_row.createCell(1).setCellValue(right);
            current_row.createCell(2).setCellValue(wrong);
        }

        //Full overview sheet
        current_sheet = workbook.createSheet("Full Overview");

        //Current index
        int ind = 1;

        //Calculate the start question and end question
        int minstartQ = Integer.MAX_VALUE;
        int maxendQ = Integer.MIN_VALUE;
        for (Results r : results)
        {
            if (r.start < minstartQ)
            {
                minstartQ = r.start;
            }
            if (r.end > maxendQ)
            {
                maxendQ = r.end;
            }
        }

        //Space out results for which sections of the total answer set were not considered
        for (Results r : results)
        {
            if (r.start > minstartQ)
            {
                for (int i = 0; i < r.start - minstartQ; i++)
                {
                    r.answers.add(0, ' ');
                }
            }
            if (r.end < maxendQ)
            {
                for (int i = 0; i < maxendQ - r.end; i++)
                {
                    r.answers.add(' ');
                }
            }
        }

        //Create a row at the current index
        Row full_overview_first_row = current_sheet.createRow(ind);

        //Notify the first/last question
        System.out.println("Lowest: " + minstartQ);
        System.out.println("Highest: " + maxendQ);

        full_overview_first_row.createCell(1).setCellValue("ID");

        for (int i = 0; i < results.size(); i++)
        {
            //Start with index 2 and add the IDs
            Cell current_cell = full_overview_first_row.createCell(i + 2);
            //Set the id to N/A if there isn't one
            if (results.get(i).ID.length() == 0)
            {
                results.get(i).ID = "N/A";
            }
            //Set cell value
            current_cell.setCellValue(results.get(i).ID);
        }

        //Iterate over number of questions
        for (int i = 0; i <= maxendQ - minstartQ; i++)
        {
            ind++;
            //Start with index 2
            Row current_row = current_sheet.createRow(ind);
            //Set the current answer's # on the sheet
            Cell qnumcell = current_row.createCell(1);
            qnumcell.setCellValue(i + minstartQ);
            int another_index = 2;
            //Go through results and set answers
            for (Results r : results)
            {
                Cell current_cell = current_row.createCell(another_index);

                //Set the color for right/wrong
                if (r.answers.get(i) != this.answerkey.answers.get(i))
                {
                    current_cell.setCellStyle(red);
                    current_cell.setCellValue(((i + minstartQ)+". ✘ " + r.answers.get(i)));
                    
                }
                else
                {
                    current_cell.setCellStyle(green);
                    current_cell.setCellValue(((i + minstartQ)+". ✔ " + r.answers.get(i)));                    
                }
                another_index++;
            }
        }

        //Overall answer worksheet
        current_sheet = workbook.createSheet("Answers Overall");
        Row overall_answer_first_row = current_sheet.createRow(1);
        //Start with 2
        ind = 2;

        //Set it as A,B,C...
        for (char c : BIParser.letters)
        {
            Cell current_cell = overall_answer_first_row.createCell(ind);
            current_cell.setCellValue(("" + c));
            ind++;
        }
        //Count the rights and wrongs for each question
        for (int i = 0; i <= maxendQ - minstartQ; i++)
        {
            //Create the row, starting with index 2
            Row current_row = current_sheet.createRow(i + 2);
            //Set to current question
            Cell current_cell = current_row.createCell(1);
            current_cell.setCellValue(((i + minstartQ)));

            //Map of answer to count for this question
            HashMap<Character, Integer> occurrences = new HashMap<Character, Integer>();
            for (Results r : results)
            {
                //put if not containing
                if (!occurrences.containsKey(r.answers.get(i)))
                {
                    occurrences.put(r.answers.get(i), 1);
                }
                //put an increment of the value
                else
                {
                    occurrences.put(r.answers.get(i), occurrences.get(r.answers.get(i)) + 1);
                }
            }
            //Going through the letters, create a row for each one and place its value
            int another_index = 2;
            for (char c : BIParser.letters)
            {
                Cell another_cell = current_row.createCell(another_index);
                if (occurrences.containsKey(c))
                {
                    another_cell.setCellValue("" + occurrences.get(c));
                }
                else
                {
                    another_cell.setCellValue("0");
                }
                another_index++;
            }
        }
        try
        {
            //Delete the file if it's already there just in case
            if (outputExcelFile.exists())
            {
                outputExcelFile.delete();
            }
            //Open a stream, write it, and close
            FileOutputStream fo = new FileOutputStream(outputExcelFile);
            workbook.write(fo);
            fo.close();

            //Encrypt if there's a password given
            String pw = new String(jPasswordField1.getPassword());
            if (pw.length() > 0)
            {
                POIFSFileSystem fs = new POIFSFileSystem();
                EncryptionInfo info = new EncryptionInfo(fs, EncryptionMode.agile);
                Encryptor enc = info.getEncryptor();
                enc.confirmPassword(pw);
                OPCPackage opc = OPCPackage.open(outputExcelFile, PackageAccess.READ_WRITE);
                OutputStream os = enc.getDataStream(fs);
                opc.save(os);
                opc.close();
                FileOutputStream fos = new FileOutputStream(outputExcelFile);
                fs.writeFilesystem(fos);
                fos.close();
            }
            //Warn about no encryption
            else
            {
                JOptionPane.showMessageDialog(this, "Warning: You saved test results without a password!");
            }
            JOptionPane.showMessageDialog(this, "Answers saved to " + outputExcelFile.getName());
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_SaveResultsButtonActionPerformed

    private void ClearTestsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearTestsButtonActionPerformed
        int sz = this.results.size();
        this.results.clear();
        JOptionPane.showMessageDialog(this, "All scanned-in scantrons have been cleared (" + sz + " removed)");
    }//GEN-LAST:event_ClearTestsButtonActionPerformed

    private void BrowseForAnswerKeyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseForAnswerKeyButtonActionPerformed
        //Look for the answer key file and add it
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showSaveDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION)
        {
            File selectedFile = fileChooser.getSelectedFile();
            try
            {
                //Make sure it's an excel file
                if (selectedFile.getName().endsWith(".xlsx"))
                {
                    //BROKEN: input password because of export restrictions in Java requiring JCE Unlimited Strength
                    String pw = new String(this.jPasswordField1.getPassword());
                    if (false)
                    {
                        POIFSFileSystem fs = new POIFSFileSystem(new FileInputStream(selectedFile.getAbsolutePath()));
                        EncryptionInfo info = new EncryptionInfo(fs);
                        Decryptor d = info.getDecryptor();
                        d.verifyPassword(pw);
                        XSSFWorkbook wb = new XSSFWorkbook(d.getDataStream(fs));
                        XSSFSheet xs = wb.getSheetAt(0);
                        List<String> as = new ArrayList<String>();
                        for (Row r : xs)
                        {
                            as.add(r.getCell(1).getStringCellValue());
                        }
                        this.answerkey = new AnswerKey(as);
                    }
                    //Grab the key
                    else
                    {
                        XSSFWorkbook wb = new XSSFWorkbook(selectedFile);
                        XSSFSheet xs = wb.getSheetAt(0);
                        List<String> as = new ArrayList<String>();
                        for (Row r : xs)
                        {
                            as.add(r.getCell(1).getStringCellValue());
                        }
                        this.answerkey = new AnswerKey(as);
                    }
                    //Print the key for the user's benefit
                    System.out.println(answerkey);
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "You need to use a password-protected Excel file (.xlsx) for input!");
                }
            }
            catch (Exception e)
            {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "You need to use a password-protected Excel file (.xlsx) for input!");
            }
        }
    }//GEN-LAST:event_BrowseForAnswerKeyButtonActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //Open a help frame
        JFrame frame = new JFrame();
        frame.getContentPane().setLayout(new FlowLayout());

        HelpMe fopo = new HelpMe();
        frame.getContentPane().add(fopo);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception
    {

        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try
        {
            /*
             * for (javax.swing.UIManager.LookAndFeelInfo info :
             * javax.swing.UIManager.getInstalledLookAndFeels()) { if
             * ("Nimbus".equals(info.getName())) {
             * javax.swing.UIManager.setLookAndFeel(info.getClassName());
             * javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
             * break; }
            }
             */
            javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Jobber.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Jobber.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Jobber.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Jobber.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Jobber().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BrowseForAnswerKeyButton;
    private javax.swing.JButton ClearTestsButton;
    private javax.swing.JComboBox DPIComboBox;
    private javax.swing.JLabel FileNameLabel;
    private javax.swing.JSpinner FirstSpinner;
    private javax.swing.JComboBox IDScanCombo;
    private javax.swing.JSpinner LastSpinner;
    private javax.swing.JButton RefreshDevicesButton;
    private javax.swing.JButton SaveResultsButton;
    private javax.swing.JButton SelectOutputFileButton;
    private javax.swing.JButton StartScanButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JComboBox scannerbox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(ScannerIOMetadata.Type type, ScannerIOMetadata metadata)
    {
        //Scan received
        if (type.equals(ScannerIOMetadata.ACQUIRED))
        {
            //Get the image
            BufferedImage bi = metadata.getImage();
            
            System.out.println("Have an image now!");
            //If they want us to ID go ahead and do it
            boolean shouldID = false;
            if (((String) this.IDScanCombo.getSelectedItem()).equals("Yes"))
            {
                shouldID = true;
                System.out.println("IDing because I was asked to");
            }
            
            //Get the current mode
            ScanModes tmpmode = mode;
            System.out.println("Scanning on mode " + mode.name());
            //TODO: fix front&back scanning
            if (this.mode.equals(ScanModes.FRONT_AND_BACK))
            {
                tmpmode = ScanModes.FRONT_ONLY;
            }
            //Parse and form the results
            Results r = BIParser.run(bi, (Integer) this.FirstSpinner.getValue(), (Integer) this.LastSpinner.getValue(), tmpmode, shouldID);
            //this.results.add(r);
            JFrame frame = new JFrame();
            frame.getContentPane().setLayout(new FlowLayout());
            //Show it on a third of the scale
            frame.getContentPane().add(new JLabel(new ImageIcon(r.redded.getScaledInstance(r.redded.getWidth() / 3, r.redded.getHeight() / 3, Image.SCALE_SMOOTH))));
            //Show the answer table
            InfoPopup fopo = new InfoPopup(this, new StudentResultsTableModel(r));
            frame.getContentPane().add(fopo);
            frame.pack();
            frame.setVisible(true);
            
            //WIP: scan front&back
            if (mode.equals(ScanModes.FRONT_AND_BACK) && r.side.equals(ScanModes.FRONT_ONLY))
            {
                JOptionPane.showConfirmDialog(this, "Please flip the scantron sheet and click OK when you're ready to scan.");
                this.mode = ScanModes.BACK_ONLY;
                try
                {
                    scanner.acquire();
                }
                catch (Exception e)
                {
                }
            }
        }
        //Negotiate, aka right after clicking the scan button
        else if (type.equals(ScannerIOMetadata.NEGOTIATE))
        {
            //Do some shady stuff?
            ScannerDevice device = metadata.getDevice();
            try
            {
                if (metadata instanceof TwainIOMetadata)
                {
                    TwainSource source = ((TwainIOMetadata) metadata).getSource();
                    //source.setCapability(TwainConstants.CAP_FEEDERENABLED, true);
                    //source.setCapability(TwainConstants.CAP_AUTOFEED, true);
                }
                //Set the resolution by choice and show some stuff
                device.setShowUserInterface(true);
                device.setShowProgressBar(true);
                device.setResolution(Integer.parseInt((String)DPIComboBox.getSelectedItem()));
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }
        //If there's a statechange, notify!
        else if (type.equals(ScannerIOMetadata.STATECHANGE))
        {
            System.err.println(metadata.getStateStr());
            if (metadata.isFinished())
            {
                System.out.println("statechange...");
                //System.exit(0);
            }
        }
        //Give the exception
        else if (type.equals(ScannerIOMetadata.EXCEPTION))
        {
            metadata.getException().printStackTrace();
        }
    }
}
